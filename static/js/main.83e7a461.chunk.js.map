{"version":3,"sources":["Game/Square.js","Game/Board.js","Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","Game_Square","squares","renderSquare","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","calculateWinner","state","winningLines","length","_this$state$winningLi","slicedToArray","b","c","compPlay","_this$state$winningLi2","o","_this$state$winningLi3","getStatus","winner","getWinner","current","history","stepNumber","findIndex","getMoves","map","step","move","desc","key","jumpTo","getStatusClass","Array","fill","x","playerX","slice","setState","concat","_this2","Game_Board","handleClick","App","src_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83e7a461.chunk.js","sourcesContent":["import React from 'react';\nimport './game.css';\n\nconst Square = (props) => {\n    return (\n    <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n    </button>\n    );    \n}\nexport default Square\n  \n  ","import React, {Component} from \"react\";\nimport Square from \"./Square\"\n\nclass Board extends Component {\n    renderSquare(i) {\n      return (\n        <Square\n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n        />\n      );\n    }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Board","import React, { Component } from 'react';\nimport Board from \"./Board\"\n\nclass Game extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        history: [\n          {\n            squares: Array(9).fill(null)\n          }\n        ], \n        stepNumber: 0,\n        o : 'O',\n        x : 'X',\n        playerX: true,\n        winningLines: [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6]\n        ]\n      };\n    }\n    calculateWinner = (squares) => {\n      for (let i = 0; i < this.state.winningLines.length; i++) {\n        const [a, b, c] = this.state.winningLines[i]; \n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n      return null;\n    }\n\n    compPlay = (squares) => {\n      //close user possible win, select best option to win\n      for (let i = 0; i < this.state.winningLines.length; i++) {\n        const [a, b, c] = this.state.winningLines[i]; \n        if (squares[a] && squares[a] === squares[b] && !squares[c]) {\n          squares[c] = this.state.o;\n          return squares\n        }\n        if (squares[a] && squares[a] === squares[c] && !squares[b]) {\n          squares[b] = this.state.o;\n          return squares\n        }\n        if (squares[b] && squares[b] === squares[c] && !squares[a]) {\n          squares[a] = this.state.o;\n          return squares\n        }\n      }\n      for (let i = 0; i < this.state.winningLines.length; i++) {\n        const [a, b, c] = this.state.winningLines[i]; \n        if(squares[a] && !squares[b]){\n          squares[b] = this.state.o;\n          return squares\n        }\n        if(squares[b] && !squares[c]){\n          squares[c] = this.state.o;\n          return squares\n        }\n        if(squares[c] && !squares[b]){\n          squares[b] = this.state.o;\n          return squares\n        }\n      }\n      return squares\n    }\n    \n    handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      let squares = current.squares.slice();\n      if (this.calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.x;\n\n      if (!this.calculateWinner(squares)){\n        squares = this.compPlay(squares);\n      }\n\n      this.setState({\n        history: history.concat([\n          {\n            squares: squares\n          }\n        ]),\n        stepNumber: history.length\n      });\n    }\n  \n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        playerX: (step % 2) === 0\n      });\n    }\n    getStatus = () => {\n      const winner = this.getWinner().winner;\n      let status;\n      if(winner === \"draw\"){\n        status = \"draw\";\n      }else if (winner) {\n        status = \"Winner: \" + winner;\n      } else {\n        status = \"Your turn\";\n      }\n      return status;\n    }\n    getWinner = () => {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      let winner = this.calculateWinner(current.squares);\n      winner = (!winner && current.squares.findIndex(a => a === null) === -1)? \"draw\" : winner;\n      return {\n        winner : winner,\n        squares : current.squares\n      };\n    }\n    getMoves = () => {\n      const history = this.state.history;\n      const moves = history.map((step, move) => {\n        const desc = move ?\n          'Go to move #' + move :\n          'Go to game start';\n        return (\n          <li key={move}>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n      });\n      return moves;\n    }\n    getStatusClass = ()=>{\n      return (this.getWinner().winner)? \"success\": \"\";\n    }\n    render() {     \n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={this.getWinner().squares}\n              onClick={i => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className={this.getStatusClass()}>{this.getStatus()}</div>\n            <ol>{this.getMoves()}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Game;","import React, { Component } from 'react';\nimport Game from \"./Game/Game\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}